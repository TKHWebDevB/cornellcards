generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Application-level user profile
model User {
    /// Matches Supabase auth.users.id (UUID)
    id        String     @id @db.Uuid
    username  String?    @unique
    email     String?    @unique
    notebooks Notebook[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

// Notebooks belong to a user
model Notebook {
    id          String       @id @default(uuid()) @db.Uuid
    title       String
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String       @db.Uuid
    collections Collection[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

// Collections belong to a notebook
model Collection {
    id         String   @id @default(uuid()) @db.Uuid
    title      String
    notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)
    notebookId String   @db.Uuid
    cues       Cue[]
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

// Cues belong to a collection
model Cue {
    id           String     @id @default(uuid()) @db.Uuid
    question     String
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    collectionId String     @db.Uuid
    answer       Answer?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

// Answers belong to a cue (one-to-one)
model Answer {
    id        String   @id @default(uuid()) @db.Uuid
    text      String
    cue       Cue      @relation(fields: [cueId], references: [id], onDelete: Cascade)
    cueId     String   @unique @db.Uuid
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
